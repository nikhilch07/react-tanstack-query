/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'

// Create Virtual Routes

const PastOrdersLazyImport = createFileRoute('/pastOrders')()
const OrderLazyImport = createFileRoute('/order')()
const ContactsLazyImport = createFileRoute('/contacts')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const PastOrdersLazyRoute = PastOrdersLazyImport.update({
  id: '/pastOrders',
  path: '/pastOrders',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/pastOrders.lazy').then((d) => d.Route))

const OrderLazyRoute = OrderLazyImport.update({
  id: '/order',
  path: '/order',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/order.lazy').then((d) => d.Route))

const ContactsLazyRoute = ContactsLazyImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contacts.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/contacts': {
      id: '/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ContactsLazyImport
      parentRoute: typeof rootRoute
    }
    '/order': {
      id: '/order'
      path: '/order'
      fullPath: '/order'
      preLoaderRoute: typeof OrderLazyImport
      parentRoute: typeof rootRoute
    }
    '/pastOrders': {
      id: '/pastOrders'
      path: '/pastOrders'
      fullPath: '/pastOrders'
      preLoaderRoute: typeof PastOrdersLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/order': typeof OrderLazyRoute
  '/pastOrders': typeof PastOrdersLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/order': typeof OrderLazyRoute
  '/pastOrders': typeof PastOrdersLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/contacts': typeof ContactsLazyRoute
  '/order': typeof OrderLazyRoute
  '/pastOrders': typeof PastOrdersLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/contacts' | '/order' | '/pastOrders'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/contacts' | '/order' | '/pastOrders'
  id: '__root__' | '/' | '/contacts' | '/order' | '/pastOrders'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ContactsLazyRoute: typeof ContactsLazyRoute
  OrderLazyRoute: typeof OrderLazyRoute
  PastOrdersLazyRoute: typeof PastOrdersLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ContactsLazyRoute: ContactsLazyRoute,
  OrderLazyRoute: OrderLazyRoute,
  PastOrdersLazyRoute: PastOrdersLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.jsx",
      "children": [
        "/",
        "/contacts",
        "/order",
        "/pastOrders"
      ]
    },
    "/": {
      "filePath": "index.lazy.jsx"
    },
    "/contacts": {
      "filePath": "contacts.lazy.jsx"
    },
    "/order": {
      "filePath": "order.lazy.jsx"
    },
    "/pastOrders": {
      "filePath": "pastOrders.lazy.jsx"
    }
  }
}
ROUTE_MANIFEST_END */
